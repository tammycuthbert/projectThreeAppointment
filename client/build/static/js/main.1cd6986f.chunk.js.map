{"version":3,"sources":["utils/setAuthToken.js","actions/authActions.js","actions/types.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/index.js","store.js","components/layout/navbar.js","components/layout/landing.js","components/auth/register.js","components/auth/login.js","components/private-route/privateRoute.js","components/dashboard/dashboard.js","components/dashboard/calendar.js","App.js","serviceWorker.js","index.js"],"names":["setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","type","payload","logoutUser","dispatch","localStorage","removeItem","isEmpty","require","initialState","isAuthenticated","user","loading","combineReducers","auth","state","action","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","Navbar","React","Component","render","className","to","style","fontFamily","Landing","height","fontSize","width","borderRadius","letterSpacing","Register","constructor","super","onChange","e","this","setState","target","id","value","onSubmit","preventDefault","newUser","name","email","password","passwordConf","props","registerUser","history","componentDidMount","push","componentWillReceiveProps","nextProps","paddingLeft","noValidate","error","classnames","invalid","htmlFor","marginTop","connect","userData","post","then","res","catch","err","response","data","withRouter","Login","loginUser","emailnotfound","passwordincorrect","setItem","jwt_decode","component","rest","Dashboard","onLogoutClick","onCalendarClick","split","margin","onClick","Calendar","department","marginLeft","jwtToken","currentTime","Date","now","exp","location","href","App","exact","path","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.1cd6986f.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst setAuthToken = token => {\r\n    if (token) {\r\n        // We apply the authentication token to every request if logged in\r\n        axios.defaults.headers.common['Authorization'] = token; \r\n    } else {\r\n        // Delete authentication header\r\n        delete axios.defaults.headers.common['Authorization'];\r\n    }\r\n};\r\n\r\nexport default setAuthToken;","import axios from 'axios';\r\nimport setAuthToken from '../utils/setAuthToken';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from './types';\r\n\r\n// I define the action for when the user registers\r\nexport const registerUser = (userData, history) => dispatch => {\r\n    axios\r\n        .post(\"/api/users/register\", userData)\r\n        .then(res => history.push(\"/login\")) // I redirect the user to the login page on successful register\r\n        .catch(err => \r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        );\r\n};\r\n\r\n// I define the action for when the user logs in, and I get the user token\r\nexport const loginUser = userData => dispatch => {\r\n    axios\r\n        .post('/api/users/login', userData)\r\n        .then(res => {\r\n            // Save to localStorage\r\n            // Set token to localStorage\r\n            const { token } = res.data;\r\n            localStorage.setItem(\"jwtToken\", token);\r\n            // I set the token to the authentication header\r\n            setAuthToken(token);\r\n            // I then decode the token to get user data\r\n            const decoded = jwt_decode(token);\r\n            // Finally, I set the current user\r\n            dispatch(setCurrentUser(decoded));\r\n        })\r\n        .catch(err =>\r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        );\r\n};\r\n\r\n// I define the actiion for settng the logged in user\r\nexport const setCurrentUser = decoded => {\r\n    return {\r\n        type: SET_CURRENT_USER,\r\n        payload: decoded\r\n    };\r\n};\r\n\r\n// I define the action for when the user is loading\r\nexport const setUserLoading = () => {\r\n    return {\r\n        type: USER_LOADING\r\n    };\r\n};\r\n\r\n// I define the action for when the user logs out\r\nexport const logoutUser = () => dispatch => {\r\n    // I first remove the token from the localStorage\r\n    localStorage.removeItem(\"jwtToken\");\r\n    // I then remove the authentication header for future requests\r\n    setAuthToken(false);\r\n    // And I finally set our current user as an empty object {}, which will set isAuthenticated to false\r\n    dispatch(setCurrentUser({}));\r\n};","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import { SET_CURRENT_USER, USER_LOADING } from '../actions/types';\r\n\r\nconst isEmpty = require('is-empty');\r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: !isEmpty(action.payload),\r\n                user: action.payload\r\n            };\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { GET_ERRORS } from '../actions/types';\r\n\r\nconst initialState = {};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport authReducer from './authReducer';\r\nimport errorReducer from './errorReducer';\r\n\r\nexport default combineReducers({\r\n    auth: authReducer,\r\n    errors: errorReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n       applyMiddleware(...middleware),\r\n       window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() \r\n    )\r\n);\r\n\r\nexport default store;","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Navbar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"navbar-fixed\">\r\n                <nav className=\"z-depth-0\">\r\n                    <div className=\"nav-wrapper white\">\r\n                        <Link to=\"/\" style={{ fontFamily: \"monospace\" }} className=\"col s5 brand-logo center black-text\">\r\n                            Schedule\r\n                        </Link>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Landing extends React.Component {\r\n    render() {\r\n        return (\r\n            <div style={{ height: \"75vh \" }} className=\"container valign-wrapper\">\r\n                <div className=\"row\">\r\n                    <div className=\"col s12 center-align\">\r\n                        <h4>\r\n                            <b>Schedule</b> an appointment using the latest <span style={{ fontFamily: \"monospace\" }}>technologies</span> on the market\r\n                        </h4>\r\n                        <p className=\"flow-text grey-text text-darken-1\" style={{ fontSize: \"1.2rem\" }}>\r\n                            Using the MERN stack and many other libraries, this responsive app will be your best choice when creating your custom schedule\r\n                        </p>\r\n                        <br/>\r\n                        <div className=\"col s6\">\r\n                            <Link to=\"/register\" style={{ width: \"140px\", borderRadius: \"3px\", letterSpacing: \"1.5px\" }} className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\">Sign Up</Link>\r\n                        </div>\r\n                        <div className=\"col s6\">\r\n                            <Link to=\"/login\" style={{ width: \"140px\", borderRadius: \"3px\", letterSpacing: \"1.5px\" }} className=\"btn btn-large btn-flat waves-effect white black-text\">Log In</Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Landing;","import React from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { registerUser } from '../../actions/authActions';\r\nimport classnames from 'classnames';\r\n\r\nclass Register extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            name: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            passwordConf: \"\",\r\n            errors: {}\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // If the user is logged in and the user navigates to the register page, we redirect them to the dashboard instead\r\n        if (this.props.auth.isAuthenticated) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errors) {\r\n            this.setState({\r\n                errors: nextProps.errors\r\n            });\r\n        }\r\n    }\r\n\r\n    onChange = e => {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    };\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const newUser = {\r\n            name: this.state.name,\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n            passwordConf: this.state.passwordConf\r\n        };\r\n\r\n        this.props.registerUser(newUser, this.props.history);\r\n    };\r\n\r\n    render() {\r\n        const { errors } = this.state;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col s8 offset-s2\">\r\n                        <Link to=\"/\" className=\"btn-flat waves-effect\">\r\n                            <i className=\"material-icons left\">keyboard_backspace</i>Back to Home\r\n                        </Link>\r\n                        <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n                            <h4><b>Register</b> below</h4>\r\n                            <p className=\"grey-text text-darken-1\">Already have an account? <Link to=\"/Login\">Log in</Link></p>\r\n                        </div>\r\n                        <form noValidate onSubmit={ this.onSubmit }>\r\n                            <div className=\"input-field col s12\">\r\n                                <input\r\n                                    onChange={ this.onChange }\r\n                                    value={ this.state.name }\r\n                                    error={ errors.name }\r\n                                    id=\"name\"\r\n                                    type=\"text\"\r\n                                    className={ classnames(\"\", { invalid: errors.name }) }\r\n                                />\r\n                                <label htmlFor=\"name\">Name</label>\r\n                                <span className=\"red-text\">{ errors.name }</span>\r\n                            </div>\r\n                            <div className=\"input-field col s12\">\r\n                                <input\r\n                                    onChange={ this.onChange }\r\n                                    value={ this.state.email }\r\n                                    error={ errors.email }\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    className={ classnames(\"\", { invalid: errors.email }) }\r\n                                />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <span className=\"red-text\">{ errors.email }</span>\r\n                            </div>\r\n                            <div className=\"input-field col s12\">\r\n                                <input \r\n                                    onChange={ this.onChange }\r\n                                    value={ this.state.password }\r\n                                    error={ errors.password }\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    className={ classnames(\"\", { invalid: errors.password }) }\r\n                                />\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <span className=\"red-text\">{ errors.password }</span>\r\n                            </div>\r\n                            <div className=\"input-field col s12\">\r\n                                <input \r\n                                    onChange={ this.onChange }\r\n                                    value={ this.state.passwordConf }\r\n                                    error={ errors.passwordConf }\r\n                                    id=\"passwordConf\"\r\n                                    type=\"password\"\r\n                                    className={ classnames(\"\", { invalid: errors.passwordConf }) }\r\n                                />\r\n                                <label htmlFor=\"passwordConf\">Confirm Password</label>\r\n                                <span className=\"red-text\">{ errors.passwordConf }</span>\r\n                            </div>\r\n                            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n                                <button \r\n                                    style={{ \r\n                                        width: \"150px\", \r\n                                        borderRadius: \"3px\", \r\n                                        letterSpacing: \"1.5px\", \r\n                                        marginTop: \"1rem\" \r\n                                    }}\r\n                                    type=\"submit\" \r\n                                    className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n                                >\r\n                                    Sign Up\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nRegister.propTypes = {\r\n    registerUser: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    errors: state.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, { registerUser })(withRouter(Register));","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { loginUser } from '../../actions/authActions';\r\nimport classnames from 'classnames';\r\n\r\nclass Login extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            errors: {}\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // If the user is logged in and the user navigates to the login page, we redirect them to the dashboard instead\r\n        if (this.props.auth.isAuthenticated) {\r\n            this.props.history.push('/dashboard');\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.auth.isAuthenticated) {\r\n            // When the user logs in successfully, we redirect it to the dashboard\r\n            this.props.history.push(\"/dashboard\"); \r\n        }\r\n\r\n        if (nextProps.errors) {\r\n            this.setState({\r\n                errors: nextProps.errors\r\n            });\r\n        }\r\n    }\r\n\r\n    onChange = e => {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    };\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const userData = {\r\n            email: this.state.email,\r\n            password: this.state.password\r\n        };\r\n\r\n        // Since we redirect the user within the component (i.e 'componentWillReceiveProps' function), we don't need to pass this.props.history as a parameter\r\n        this.props.loginUser(userData); \r\n    };\r\n\r\n    render() {\r\n        const { errors } = this.state;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div style={{ marginTop: \"4rem\" }} className=\"row\">\r\n                    <div className=\"col s8 offset-s2\">\r\n                        <Link to=\"/\" className=\"btn-flat waves-effect\">\r\n                            <i className=\"material-icons left\">keyboard_backspace</i>Back to Home\r\n                        </Link>\r\n                        <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n                            <h4><b>Login</b> below</h4>\r\n                            <p className=\"grey-text text-darken-1\">Don't have an account? <Link to=\"/register/\">Register</Link></p>\r\n                        </div>\r\n                        <form noValidate onSubmit={ this.onSubmit }>\r\n                            <div className=\"input-field col s12\">\r\n                                <input\r\n                                    onChange={ this.onChange }\r\n                                    value={ this.state.email }\r\n                                    error={ errors.email }\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    className={ classnames(\"\", { invalid: errors.email || errors.emailnotfound }) }\r\n                                />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <span className=\"red-text\">\r\n                                    { errors.email }\r\n                                    { errors.emailnotfound }\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"input-field col s12\">\r\n                                <input\r\n                                    onChange={ this.onChange }\r\n                                    value={ this.state.password }\r\n                                    error={ errors.password }\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    className={ classnames(\"\", { invalid: errors.password || errors.passwordincorrect }) }\r\n                                />\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <span className=\"red-text\">\r\n                                    { errors.password }\r\n                                    { errors.passwordincorrect }\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\"}}>\r\n                                <button\r\n                                    style={{\r\n                                        width: \"150px\",\r\n                                        borderRadius: \"3px\",\r\n                                        letterSpacing: \"1.5px\",\r\n                                        marginTop: \"1rem\"\r\n                                    }}\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n                                >\r\n                                    Login\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nLogin.propTypes = {\r\n    loginUser: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    errors: state.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, { loginUser })(Login);","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n    <Route\r\n        { ...rest }\r\n        render={ props => auth.isAuthenticated === true ? \r\n            ( <Component { ...props } /> ) : \r\n            ( <Redirect to=\"/login\" /> )\r\n        }\r\n    />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n    auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { logoutUser } from '../../actions/authActions';\r\n\r\nclass Dashboard extends Component {\r\n    // Event called when the logout button is pressed\r\n    onLogoutClick = e => {\r\n        e.preventDefault();\r\n        // We logout the user by using the logoutUser() method from '../../actions/authActions'\r\n        this.props.logoutUser();\r\n    };\r\n\r\n    // Event called when the calendat button is pressed\r\n    onCalendarClick = e => {\r\n        e.preventDefault();\r\n        // We redirect the user to the calendar page\r\n        this.props.history.push(\"/calendar\");\r\n    }\r\n\r\n    render() {\r\n        const { user } = this.props.auth;\r\n\r\n        return (\r\n            <div style={{ height: \"75vh\" }} className=\"container valign-wrapper\">\r\n                <div className=\"row\">\r\n                    <div className=\"col s12\">\r\n                        <h4>\r\n                            <b>{ user.name.split(\" \")[0] },</b>\r\n                            <p className=\"flow-text grey-text text-darken-1\">\r\n                                Welcome on your <span style={{ fontFamily: 'monospace' }}>/dashboard</span> ! \r\n                                <br/>\r\n                                You may review your appointments, change them if they haven't been accepted yet, or even cancel them.\r\n                            </p>\r\n                        </h4>\r\n                        <button\r\n                            style={{\r\n                                letterSpacing: \"1.5px\",\r\n                                margin: \"1rem 0\"\r\n                            }}\r\n                            onClick={ this.onCalendarClick }\r\n                            className=\"btn btn-large waves-effect waves-light hoverable teal darken\"\r\n                        >\r\n                            Access Calendar\r\n                        </button>\r\n                        <button\r\n                            style={{\r\n                                letterSpacing: \"1.5px\",\r\n                                margin: \"1rem 0\"\r\n                            }}\r\n                            className=\"btn btn-large waves-effect hoverable grey lighten-2 grey-text text-darken-2\"\r\n                        >\r\n                            Review Schedule\r\n                        </button>\r\n                        <button\r\n                            style={{\r\n                                letterSpacing: \"1.5px\",\r\n                                margin: \"1rem 0\"\r\n                            }}\r\n                            className=\"btn btn-large waves-effect waves-light hoverable red darken-3\"\r\n                        >\r\n                            Cancel Appointment\r\n                        </button>\r\n                        <div className=\"divider\"></div>\r\n                        <button \r\n                            style={{\r\n                                width: \"150px\",\r\n                                borderRadius: \"3px\",\r\n                                letterSpacing: \"1.5px\",\r\n                                marginTop: \"1rem\"\r\n                            }}\r\n                            onClick={ this.onLogoutClick }\r\n                            className=\"btn-flat btn-large waves-effect waves-grey white\"\r\n                        >\r\n                            Logout\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDashboard.propTypes = {\r\n    logoutUser: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, { logoutUser })(Dashboard);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { logoutUser } from '../../actions/authActions';\r\n\r\nclass Calendar extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            department: ''\r\n        };\r\n    }\r\n\r\n    // Event called when the logout button is pressed\r\n    onLogoutClick = e => {\r\n        e.preventDefault();\r\n        // We logout the user by using the logoutUser() method from '../../actions/authActions'\r\n        this.props.logoutUser();\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <div \r\n                style={{ height: \"75vh\" }}\r\n                className=\"container\"\r\n            >\r\n                <div className=\"row\">\r\n                    <div className=\"col s12\">\r\n                        <h4 style={{ fontSize: \"2rem\" }}>\r\n                            <b>DEPARTMENT</b>\r\n                            <span style={{ marginLeft: \"20px\"}}>/dept</span>\r\n                        </h4>\r\n                        <div className=\"divider\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nCalendar.propTypes = {\r\n    auth: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, { logoutUser })(Calendar);","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport jwt_decode from 'jwt-decode';\nimport setAuthToken from './utils/setAuthToken';\nimport { setCurrentUser, logoutUser } from './actions/authActions';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport Navbar from './components/layout/navbar';\nimport Landing from './components/layout/landing';\nimport Register from './components/auth/register';\nimport Login from './components/auth/login';\nimport PrivateRoute from './components/private-route/privateRoute';\nimport Dashboard from './components/dashboard/dashboard';\nimport Calendar from './components/dashboard/calendar';\n\n// First of all, I check the token to see if the user is still logged in\nif (localStorage.jwtToken) {\n    // I set the authentication token from the localStorage to our header (i.e 'utils/setAuthToken.js')\n    const token = localStorage.jwtToken;\n    setAuthToken(token);\n    // I decode the token and get the user info and expiration date\n    const decoded = jwt_decode(token);\n    \n    // I set the user and isAthenticated\n    store.dispatch(setCurrentUser(decoded));\n\n    // I check for expired token\n    const currentTime = Date.now() / 1000; // We divide per 1000 to get the result in milliseconds\n    if (decoded.exp < currentTime) {\n        // We logout the user automatically...\n        store.dispatch(logoutUser());\n        // ... and we redirect it to the login page\n        window.location.href = './login';\n    }\n}\n\nfunction App() {\n    return (\n        <Provider store={ store }>\n            <Router>\n                <div className=\"App\">\n                    <Navbar />\n                    <Route exact path=\"/\" component={ Landing } />\n                    <Route exact path=\"/register\" component={ Register } />\n                    <Route exact path=\"/login\" component={ Login } />\n                    <switch>\n                        <PrivateRoute exact path=\"/dashboard\" component={ Dashboard } />\n                        <PrivateRoute exact path=\"/calendar\" component={ Calendar } />\n                    </switch>\n                </div>\n            </Router>\n        </Provider>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}